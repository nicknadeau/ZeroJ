package net.nicknadeau.zero.block;

import net.nicknadeau.zero.util.internal.BlockHashPreImageUtil;

import java.math.BigInteger;

/**
 * A block.
 *
 * Any two blocks must be considered equal if their block hashes are equal and must be considered not equal if their
 * block hashes are not equal.
 */
public interface Block {

    /**
     * Returns the major version number of the version of the Zero specification that was used to construct this block.
     * The returned integer must be interpreted as an unsigned integer.
     *
     * @return the major version number of Zero used to construct this block.
     */
    public int getLayerZeroMajorVersion();

    /**
     * Returns this block's number. The block number is a non-negative number that is equal to the number of ancestors
     * this block has. Thus, the genesis block is the unique block with block number zero.
     *
     * The block number must always be non-null.
     *
     * @return the block's number.
     */
    public BigInteger getBlockNumber();

    /**
     * Returns the cryptographic public key of the account that produced this block.
     *
     * The returned public key must always be non-null and have a length of at least 1 byte.
     *
     * @return the public key of the block producer.
     */
    public byte[] getBlockProducerPublicKey();

    /**
     * Returns the hash of this block.
     *
     * The hash is produced by performing a hash operation on the pre-image generated by the
     * {@link BlockHashPreImageUtil} class.
     *
     * The hash is the unique identifier of this block.
     *
     * The returned hash must always be non-null and have a length of at least 1 byte.
     *
     * @return the hash of the block.
     */
    public byte[] getBlockHash();

    /**
     * Returns the hash of this block's parent block.
     *
     * The returned hash must be the same hash yielded by invoking {@link Block#getBlockHash()} on the parent block.
     *
     * The returned hash must always be non-null and have a length of at least 1 byte if this block is not a genesis
     * block (ie. invoking {@link Block#getBlockNumber()} returns a positive number). If this block is a genesis block
     * (ie. invoking {@link Block#getBlockNumber()} returns zero), then the returned hash must be null.
     *
     * @return the hash of this block's parent if this is a non-genesis block or null if this is a genesis block.
     */
    public byte[] getParentBlockHash();

    /**
     * Returns the opaque data associated with this block.
     *
     * The returned data must always be non-null.
     *
     * @return the block's data.
     */
    public byte[] getBlockData();

    /**
     * Returns the signature of this block. The signature is the cryptographic signature produced by the block producer's
     * private key signing the block's hash.
     *
     * The returned signature must always be non-null and have a length of at least 1 byte.
     *
     * @return the block's signature.
     */
    public byte[] getBlockSignature();
}
